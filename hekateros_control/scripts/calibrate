#! /usr/bin/env python
 
###############################################################################
#
# Package:  RoadNarrows Robotics Hekateros Robotic Manipulator Package
#
# Link:     https://github.com/roadnarrows-robotics/hekateros
#
# ROS Node: calibrate
#
# File: calibrate
#
## \file 
##
## $LastChangedDate$
## $Rev$
##
## \brief Calibrate the Hekateros arm via an action server.
##
## \author Robin Knight (robin.knight@roadnarrows.com)
##  
## \par Copyright:
##   (C) 2014.  RoadNarrows LLC.\n
##   (http://www.roadnarrows.com)\n
##   All Rights Reserved
##
# @EulaBegin@
# @EulaEnd@
#
###############################################################################

import time
import sys

import roslib; roslib.load_manifest('hekateros_control')
import rospy

import actionlib
from actionlib_msgs.msg import GoalStatus

from hekateros_control.msg import HekOpState

from hekateros_control.ACCalibrate import *

# Calibration action state
CalibStateFailed  = -1        # failed calibration action
CalibStateIdle    =  0        # no on-going calibration action
CalibStateRunning =  1        # calibration action running
CalibStateSuccess =  3        # calibration action success

# Progress characters
ProgressChars = ['-', '/', '|', '\\']

#
## \brief Simple calibration client wrapper class.
#
class CalibClient:
  def __init__(self):
    self.m_ac         = None            # action client
    self.m_state      = CalibStateIdle  # calibration action state
    self.m_joiName    = ""              # joint of interest name
    self.m_joiState   = ""              # joint of interest calibration state
    self.m_idxProg    = 0               # progress index

  #
  ## \brief (Cancel) calibration callback.
  #
  def calibrate(self):
    rospy.loginfo("Calibrating Hekateros")

    # create calibration action client, if not already created
    if self.m_ac is None:
      self.m_ac = ACCalibrate()

    self.m_state  = CalibStateRunning

    # start calibration
    if not self.m_ac.exec_calib(self.monitor, timeout=10.0, force_recalib=True):
      rospy.logerr("Could not execute calibration. " \
                     "Is the hekateros_control node running?")
      self.cancel()
      
  #
  ## \brief Cancel calibration, setting data and widget state accordingly.
  #
  def cancel(self):
      self.m_ac.cancel()
      self.m_state = CalibStateFailed
      self.clear_progress_bar()
      sys.stderr.write("%80s\r" % (""))
      rospy.logerr("Calibration preempted.")

  #
  ## \brief Monitor the calibration feedback callback.
  #
  def monitor(self, feedback):
    self.m_joiName    = ""
    self.m_joiState   = ""
    self.m_idxProg    = (self.m_idxProg+1) % len(ProgressChars)
    numCalib          = 0
    numJoints         = len(feedback.name)
    for i in range(0, numJoints):
      name    = feedback.name[i]
      opstate = feedback.op[i]
      if opstate.calib_state == HekOpState.CALIBRATING:
        self.m_joiName  = name
        self.m_joiState = "calibrating"
      elif opstate.calib_state == HekOpState.CALIBRATED:
        numCalib += 1
    self.clear_progress_bar()
    self.show_progress_bar(numCalib, numJoints)

  #
  ## \brief Check for calibration complete.
  #
  def is_done(self):
    if self.m_state != CalibStateRunning:
      return True
    status = self.m_ac.get_action_state()
    #rospy.loginfo(status)
    # executing
    if    status == GoalStatus.PENDING or status == GoalStatus.ACTIVE or \
          status == GoalStatus.PREEMPTING or status == GoalStatus.RECALLING:
      return False
    # finished with abort or error
    elif  status == GoalStatus.PREEMPTED or status == GoalStatus.REJECTED or \
          status == GoalStatus.RECALLED or status == GoalStatus.ABORTED or \
          status == GoalStatus.REJECTED:
      self.m_state = CalibStateFailed
      return True
    # finished with success
    elif  status == GoalStatus.SUCCEEDED:
      self.m_state = CalibStateSuccess
      return True
    # unknown
    else:
      rospy.logerr("Unknown status %d" % (status))
      self.m_state = CalibStateFailed
      return True

  #
  ## \brief Show ascii progress bar.
  #
  def show_progress_bar(self, numCalib, numJoints):
    sys.stderr.write("%2d/%-2d %s %s %s\r" % \
        (numCalib+1, numJoints,
          ProgressChars[self.m_idxProg],
          self.m_joiName, self.m_joiState))

  #
  ## \brief Clear ascii progress bar.
  #
  def clear_progress_bar(self):
    sys.stderr.write("%80s\r" % (""))


if __name__ == '__main__':
  rospy.init_node("calibrate")
  calib_client = CalibClient()
  calib_client.calibrate()
  while not calib_client.is_done():
    time.sleep(1)
  calib_client.clear_progress_bar()
  sys.stderr.write("\n")
  if calib_client.m_state == CalibStateSuccess:
    rospy.loginfo("Calibration sequence complete!")
    ec = 0
  else:
    rospy.loginfo("Calibration sequence failed.")
    ec = 4
  time.sleep(1) # ros stuff could still be cleaning up
  sys.exit(ec)
