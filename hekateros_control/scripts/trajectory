#! /usr/bin/env python
 
###############################################################################
#
# Package:  RoadNarrows Robotics Hekateros Robotic Manipulator Package
#
# Link:     https://github.com/roadnarrows-robotics/hekateros
#
# ROS Node: trajectory
#
# File: trajectory
#
## \file 
##
## $LastChangedDate$
## $Rev$
##
## \brief Read and parse a list of trajectory files, requesting Hekateros to
## follow each trajectory.
##
## The format of the files are yaml, typically output from rostopic. Only
## one trajectoy can be specified per file.
##
## One method to build a trajectory file:
##  \li Start Moveit!
##  \li Set start and goal positions.
##  \li In a separate window:
##      $ rostopic echo /hekateros_control/follow_joint_traj_as/goal > file
##  \li Plan and execute move.
##
## \author Robin Knight (robin.knight@roadnarrows.com)
##  
## \par Copyright:
##   (C) 2015.  RoadNarrows LLC.\n
##   (http://www.roadnarrows.com)\n
##   All Rights Reserved
##
# @EulaBegin@
# @EulaEnd@
#
###############################################################################

import sys
import os
import time
import fcntl
import termios
import getopt

import yaml

import roslib; roslib.load_manifest('hekateros_control')
import rospy

import actionlib
from   actionlib_msgs.msg import GoalStatus
import control_msgs.msg
import trajectory_msgs.msg

# Application exit codes
APP_EC_OK   = 0   # success 
APP_EC_ARGS = 2   # invalid command-line options and/or arguments
APP_EC_EXEC = 4   # execution failure

# Progress characters
ProgressChars = ['|', '/', '|', '\\']


# ------------------------------------------------------------------------------
# Exception Class usage
# ------------------------------------------------------------------------------

##
## \brief Unit test command-line exception class.
##
## Raise usage excpetion.
##
class usage(Exception):

  ##
  ## \brief Constructor.
  ##
  ## \param msg   Error message string.
  ##
  def __init__(self, msg):
    ## error message attribute
    self.msg = msg


# ------------------------------------------------------------------------------
# Class application
# ------------------------------------------------------------------------------

##
## \brief Hekateros Trajectory.
##
class application():

  #
  ## \brief Constructor.
  #
  def __init__(self):
    self._Argv0 = os.path.basename(__file__)
    self.m_win = None # future gui version

  #
  ## \brief Print usage error.
  ##
  ## \param emsg  Error message string.
  #
  def printUsageErr(self, emsg):
    if emsg:
      print "%s: %s" % (self._Argv0, emsg)
    else:
      print "%s: error" % (self._Argv0)
    print "Try '%s --help' for more information." % (self._Argv0)

  ## \brief Print Command-Line Usage Message.
  def printUsage(self):
    print \
"""
usage: %s [OPTIONS] file [file...]
       %s --help

Read and parse a list of trajectory files, requesting Hekateros to follow each
parsed trajectory in sequence.

Options and arguments:
-a, --auto      : Automatically sequence through the list of trajectories.
                    Default: Manually step through sequence.
-f, --format    : Input file format. One of: yaml
                    Default: yaml
-l, --loop      : Continuously loop through trajectories.
                    Default: Execute sequence only once.
           
-h, --help      : Display this help and exit.

Description:
Each trajectory file specifies a trajectory of waypoints from the starting
position to the goal end postion. Once a trajectory is parsed, %s acts
as a simple action server client to connected to the Hekateros follow
trajectory action server.

Notes:
1. The ending position of trajectory i must line up with the starting position
   of trajectory i+1.
2. Only one trajectory can be specified in each file. Look for '---' sequences.
"""  % (self._Argv0, self._Argv0, self._Argv0)
 
  #
  ## \brief Get command-line options
  ##  
  ## \param argv          Argument list. If not None, then overrides
  ##                      command-line arguments.
  ## \param [out] kwargs  Keyword argument list.  
  ##
  ## \return Parsed keyword arguments.
  #
  def getOptions(self, argv=None, **kwargs):
    if argv is None:
      argv = sys.argv

    self._Argv0 = os.path.basename(kwargs.get('argv0', __file__))

    # defaults
    kwargs['auto']    = False
    kwargs['debug']   = False
    kwargs['format']  = 'yaml'
    kwargs['loop']    = False

    # parse command-line options
    try:
      opts, args = getopt.getopt(argv[1:], "af:l?h",
          ['auto', 'format=', 'loop', 'help', ''])
    except getopt.error, msg:
      raise usage(msg)
    for opt, optarg in opts:
      if opt in ('-h', '--help', '-?'):
        self.printUsage()
        sys.exit(0)
      elif opt in ('-a', '--auto'):
        kwargs['auto'] = True
      elif opt in ('-f', '--format'):
        if optarg in ('yaml'):
          kwargs['format'] = optarg
        else:
          self.printUsageErr("File format %s not supported." % (optarg))
          sys.exit(2)
      elif opt in ('-l', '--loop'):
        kwargs['loop'] = True

    if len(args) < 1:
      self.printUsageErr("No input trajectory files specified.");
      sys.exit(2)
    else:
      kwargs['filenames'] = args

    return kwargs

  #
  ## \brief Block waiting for any keyboard key press.
  ##    
  ## \return Return pressed keyboard code.
  #
  def kbhit(self):
    fd = sys.stdin.fileno()
    oldattr = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)
    oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)
    try:
      while True:
        try:
          c = sys.stdin.read(1)
          #print 'here', repr(c)
          break
        except IOError:
          pass
    finally:
      termios.tcsetattr(fd, termios.TCSAFLUSH, oldattr)
      fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)
    return c

  #
  ## \brief Show ascii progress bar.
  ##    
  ## \param index Progress index.
  #
  def show_progress_bar(self, index):
    self.pr("%s\r" % (ProgressChars[index]))

  #
  ## \brief Print text to stdout and flush.
  ##    
  ## Output file stream stdout is usually line buffered. To force display
  ## of text with no newlines, flush after writing.
  ##
  ## \param text  Text string to print.
  #
  def pr(self, text):
    sys.stdout.write(text)
    sys.stdout.flush()

  #
  ## \brief Load trajectory from file.
  ##
  ## The file is opened, parsed, and loaded into a structured document.
  ##    
  ## \param filename  Name of file specifying trajectory.
  ##
  ## \return True on success, False on failure.
  #
  def loadTrajectory(self, filename):
    try:
      stream = open(filename, 'r')
    except IOError, e:
      print "%s:" % (self._Argv0), e
      return False
    try:
      self.m_doc = yaml.load(stream)
    except yaml.scanner.ScannerError, e:
      print "%s: YAML:" % (self._Argv0), e
      return False
    finally:
      stream.close()
    self.m_docTraj = self.m_doc['goal']['trajectory']
    #print self.m_docTraj['joint_names']
    #print len(self.m_docTraj['points'])
    return True

  #
  ## \brief Make a ROS goal trajectory message from the loaded document.
  #
  def makeGoalMsg(self):
    joint_traj = trajectory_msgs.msg.JointTrajectory()
    joint_traj.joint_names = self.m_docTraj['joint_names']
    for point in self.m_docTraj['points']:
      jtp = trajectory_msgs.msg.JointTrajectoryPoint()
      jtp.positions = point['positions']
      jtp.velocities = point['velocities']
      jtp.accelerations = point['accelerations']
      joint_traj.points.append(jtp)
    self.m_goal = control_msgs.msg.FollowJointTrajectoryGoal()
    self.m_goal.trajectory = joint_traj
    self.m_goal.trajectory.header.stamp = rospy.Time.now() + \
                                          rospy.Duration(10.0)
    print "  Joints:   ", self.m_goal.trajectory.joint_names
    print "  Waypoints:", len(self.m_goal.trajectory.points)

  #
  ## \brief Execute Hekateros trajectory.
  ##    
  ## The execution is performed through the actionlib follow trajectory
  ## interaction of the client(this) and Hekateros (hekateros_control) nodes.
  ##
  ## \return True on success, False on failure.
  #
  def execTrajectory(self):
    msg = "  Executiong trajectory ..."
    # Send the goal to the action server.
    self.pr(msg+"\r")
    self.m_client.send_goal(self.m_goal)

    i = 0

    #
    # Track progress.
    #
    while True:
      state = self.m_client.get_state()
      if state == GoalStatus.PENDING or \
         state == GoalStatus.ACTIVE:
        self.show_progress_bar(i)
        i = (i+1) % len(ProgressChars)
      elif state == GoalStatus.SUCCEEDED:
        if self.m_client.get_result() < 0:
          print msg, "failed."
          return False
        else:
          print msg, "done."
          return True
      else:
        print msg, "failed."
        return False
      time.sleep(0.25)

    # Waits for the server to finish performing the action.
    # block wait alternative self.m_client.wait_for_result()

  #
  ## \brief Run application.
  ##    
  ## \param argv    Optional argument list to override command-line arguments.
  ## \param kwargs  Optional keyword argument list.
  ##
  ## \return Exit code.
  #
  def run(self, argv=None, **kwargs):
  
    # parse command-line options and arguments
    try:
      kwargs = self.getOptions(argv, **kwargs)
    except usage, e:
      self.printUsageErr(e.msg)
      return APP_EC_ARGS

    try:
      # initialize ROS node
      rospy.init_node('trajectory')

      # create follow trajectory actionlib client
      self.m_client = actionlib.SimpleActionClient( 
                                  'hekateros_control/follow_joint_traj_as', 
                                  control_msgs.msg.FollowJointTrajectoryAction)

      self.pr("Waiting for Hekateros action server ... ")

      # connect to Hekateros follow trajectory actionlib server
      sec = 10.0
      if self.m_client.wait_for_server(timeout=rospy.Duration(sec)):
        print "connected."
      else:
        print "failed to connect in %.1f seconds." % (sec)
        return APP_EC_EXEC
    except rospy.ROSInitException, e:
      print "%s:" % (self._Argv0), e
      return APP_EC_EXEC
    except rospy.ROSInterruptException, e:
      print "%s:" % (self._Argv0), e
      return APP_EC_EXEC

    cycle = 1

    #
    # Cycle through loop of trajectory files.
    #
    while kwargs['loop'] or cycle == 1:
      if kwargs['loop']:
        print "\n\n  * Cycle %d *" % (cycle)

      n = 1

      #
      # Loop through all trajectory files.
      #
      for filename in kwargs['filenames']:
        print "Trajectoy %d: %s" % (n, os.path.basename(filename))
        if not self.loadTrajectory(filename):
          return APP_EC_EXEC
        self.makeGoalMsg()
        if not kwargs['auto']:
          self.pr("PRESS ANY KEY...")
          self.kbhit()
          self.pr("\r                  \r") # erase prompt
        if not self.execTrajectory():
          return APP_EC_EXEC
        n += 1

      cycle += 1

    return APP_EC_OK


# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
if __name__ == '__main__':
  app = application();
  sys.exit( app.run() );
